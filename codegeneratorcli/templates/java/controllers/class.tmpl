package {rootname}.controller;

import org.springframework.http.ResponseEntity;

import org.springframework.stereotype.Controller;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.List;
import java.util.UUID;

import {rootname}.view.*;
import {rootname}.service.*;

@RequestMapping(value = "/api/{tablelower}s")
@Controller
public class {tablepascal}Controller {
	@Autowired
	private {tablepascal}Service service;
  
	@RequestMapping(value = "", method = RequestMethod.POST)
	public ResponseEntity<?> insert(@RequestBody {tablepascal}View new{tablepascal}) {
		{tablepascal}View result = service.insert(new{tablepascal});
		if (result == null) {
			return ResponseEntity.status(400).body("Could not create new {tablepascal}");
		}
		return ResponseEntity.ok(result);
	}

    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<?> selectAll() {
        List<{tablepascal}View> result = service.selectAll();
        if (result.size() == 0) {
            return ResponseEntity.status(404).body("No results");
        }
        return ResponseEntity.ok(result);
    }

	@RequestMapping(value = "{value}", method = RequestMethod.GET)
	public ResponseEntity<?> getByPk(@PathVariable {primarydatatype} value) {
		{tablepascal}View result = service.selectByPk(value);
		if (result == null) {
			return ResponseEntity.status(404).body("Could not find {tablepascal} with id " + value);
		}
		return ResponseEntity.ok(result);
	}

	@RequestMapping(value = "", method = RequestMethod.PUT)
	public ResponseEntity<?> update(@RequestBody {tablepascal}View updated{tablepascal}) {
		boolean result = service.update(updated{tablepascal});
		if (!result) {
			return ResponseEntity.status(400).body("Could not update {tablepascal}");
		}
		return ResponseEntity.ok(result);
	}

	@RequestMapping(value = "{id}", method = RequestMethod.DELETE)
	public ResponseEntity<?> delete(@PathVariable {primarydatatype} id) {
		boolean result = service.delete(id);
		if (!result) {
			return ResponseEntity.status(400).body("Could not delete {tablepascal}");
		}
		return ResponseEntity.ok(result);
	}{selectforparent}{selectbyunique}
}

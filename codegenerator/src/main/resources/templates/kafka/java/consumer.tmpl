package {rootname}.kafkainfra;

import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.common.serialization.LongDeserializer;

import java.time.Duration;
import java.util.Properties;
import java.util.Collections;
import java.util.function.Function;
import java.time.temporal.ChronoUnit;

import {rootname}.view.{tablepascal}View;

public class {tablepascal}ViewConsumer {
  private static final String BOOTSTRAP_SERVERS = "localhost:29092";
  private static final String TOPIC = "test-topic";

  private final Function<{tablepascal}View, Void> onConsume{tablepascal};
  private final Function<Integer, Void> onNoRecord;
  private final Consumer<Long, {tablepascal}View> consumer;

  private boolean running = false;
  private Thread worker = null;

  public {tablepascal}ViewConsumer(Function<{tablepascal}View, Void> onConsume{tablepascal}, Function<Integer, Void> onNoRecord) {
    this.onConsume{tablepascal} = onConsume{tablepascal};
    this.onNoRecord = onNoRecord;
    final Properties props = new Properties();
    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS);
    props.put(ConsumerConfig.GROUP_ID_CONFIG, "KafkaConsumerExample");
    props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());
    props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, {tablepascal}ViewDeserializer.class.getName());
    consumer = new KafkaConsumer<Long, {tablepascal}View>(props);
    consumer.subscribe(Collections.singletonList(TOPIC));
  }

  public void start() {
    running = true;
    worker = new Thread(this::doWork);
    worker.start();
  }

  public void stop() {
    running = false;
    try {
      worker.join();
    } catch (Exception ignored) {}
    consumer.unsubscribe();
    consumer.close();
  }

  private void doWork() {
    final int pollTimeoutMilliSeconds = 2000;
    int noRecordsCount = 0;
    while (running) {
      final ConsumerRecords<Long, {tablepascal}View> consumedRecords = consumer.poll(Duration.of(pollTimeoutMilliSeconds, ChronoUnit.MILLIS));
      if(consumedRecords.isEmpty()) {
        onNoRecord.apply(++noRecordsCount);
      }
      consumedRecords.forEach(record -> {
        onConsume{tablepascal}.apply(record.value());
      });
      consumer.commitAsync();
    }
  }
}

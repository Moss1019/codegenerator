package {rootname}.repository;

import {rootname}.entity.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Repository
public class {tablepascal}Repository extends BaseRepository<{tablepascal}> {{childrepos}

  public {tablepascal}Repository() {
    super("{tablecamel}s");
  }
  
  public {tablepascal} insert({tablepascal} {tablecamel}) {
    collections.get(collectionName)
        .put({tablecamel}.getPrimary(), {tablecamel});
    return {tablecamel};
  }

  public boolean delete({primarydatatype} value) {
    Optional<{tablepascal}> obj = collections.get(collectionName)
        .values()
        .stream()
        .filter(x -> x.getPrimary().equals(value))
        .map(x -> ({tablepascal})x)
        .findFirst();
    if(obj.isPresent()) {{deletechildren}
      collections.get(collectionName).remove(value);
      return true;
    }
    return false;
  }

  public List<{tablepascal}> selectAll() {
    return collections.get(collectionName).values()
        .stream()
        .map(x -> {
          {tablepascal} a = ({tablepascal})x;{setchildlists}
          return a;
        })
        .collect(Collectors.toList());
  }

  public {tablepascal} selectByPk({primarydatatype} {primarycamel}) {
    return collections.get(collectionName).values()
        .stream()
        .filter(x -> x.getPrimary().equals({primarycamel}))
        .map(x -> {
          {tablepascal} a = ({tablepascal})x;{setchildlists}
          return a;
        })
        .findFirst().orElse(null);
  }

  public boolean update({tablepascal} updated) {
    Optional<{tablepascal}> {tablecamel} = collections.get(collectionName)
        .values()
        .stream()
        .filter(x -> x.getPrimary().equals(updated.getPrimary()))
        .map(x -> ({tablepascal})x)
        .findFirst();
    if({tablecamel}.isPresent()) {
      collections.get(collectionName).put(updated.getPrimary(), updated);
      return true;
    }
    return false;
  }{selectbyunique}{selectofparent}
}
